name: Manual Deployment

# This workflow allows manual deployments with custom options
# Useful for hotfixes, rollbacks, or deploying specific branches

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - preview
          - production
      skip_tests:
        description: 'Skip tests (not recommended for production)'
        required: false
        type: boolean
        default: false
      run_migrations:
        description: 'Run database migrations'
        required: false
        type: boolean
        default: true
      deploy_ref:
        description: 'Git ref to deploy (branch/tag/commit)'
        required: false
        type: string
        default: ''

env:
  NODE_VERSION: '20'

jobs:
  # Conditional test job
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.deploy_ref || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run tests
        run: npm run test:ci
        env:
          DATABASE_URL: file:./test.db
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

  # Manual deployment job
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: test
    if: ${{ always() && (needs.test.result == 'success' || needs.test.result == 'skipped') }}
    environment:
      name: ${{ inputs.environment == 'production' && 'Production' || 'Preview' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.deploy_ref || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: |
          if [ "${{ inputs.environment }}" == "production" ]; then
            vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          fi

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run Database Migrations
        if: ${{ inputs.run_migrations && inputs.environment == 'production' }}
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_PRODUCTION }}

      - name: Build Project Artifacts
        run: |
          if [ "${{ inputs.environment }}" == "production" ]; then
            vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel build --token=${{ secrets.VERCEL_TOKEN }}
          fi
        env:
          DATABASE_URL: ${{ inputs.environment == 'production' && secrets.DATABASE_URL_PRODUCTION || secrets.DATABASE_URL }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          if [ "${{ inputs.environment }}" == "production" ]; then
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          else
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          fi
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "### Manual Deployment" >> $GITHUB_STEP_SUMMARY
          echo "Environment: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "Deployment URL: $DEPLOYMENT_URL" >> $GITHUB_STEP_SUMMARY
          echo "Ref: ${{ inputs.deploy_ref || github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "Tests skipped: ${{ inputs.skip_tests }}" >> $GITHUB_STEP_SUMMARY
          echo "Migrations run: ${{ inputs.run_migrations }}" >> $GITHUB_STEP_SUMMARY

      - name: Verify Deployment Health
        if: ${{ inputs.environment == 'production' }}
        run: |
          sleep 10
          HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}\n" ${{ steps.deploy.outputs.deployment-url }})
          if [ $HTTP_STATUS -ne 200 ]; then
            echo "Health check failed with status code: $HTTP_STATUS"
            exit 1
          fi
          echo "Deployment health check passed with status code: $HTTP_STATUS"

      - name: Create deployment notification
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentInfo = `
            ## Manual Deployment Complete

            - **Environment**: ${{ inputs.environment }}
            - **URL**: ${{ steps.deploy.outputs.deployment-url }}
            - **Ref**: ${{ inputs.deploy_ref || github.ref }}
            - **Tests**: ${{ inputs.skip_tests && 'Skipped' || 'Passed' }}
            - **Migrations**: ${{ inputs.run_migrations && 'Run' || 'Skipped' }}
            - **Triggered by**: @${{ github.actor }}
            - **Workflow**: [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;

            // You can extend this to post to Slack, Discord, etc.
            console.log(deploymentInfo);
